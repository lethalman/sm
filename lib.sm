id = x: x;

flip = f x y: f y x;

not = x: x == false;

empty? = x:
	if x == [] then true
	else if x == "" then true
	else if eos? x then true
	else false;

foldr = f z s:
	x, ns = s;
	if eos? x then z
	else f x (foldr f z ns);

map = f: foldr (x ns: [f x, ns]) eos;

filter = f: foldr (x ns: if f x then [x, ns] else ns) eos;

head = n s:
	x, ns = s;
	if eos? x then eos
	else if n < 1 then eos
	else [x, head (n-1) ns];

tail = n s:
	go = i xs a:
		x, ns = xs;
		if eos? x then [0, a]
		else (l,t = go (i+1) ns eos;
			  if l < n then [l+1, [x, t]] else [l,t]);
	_, r = go 0 s eos;
	r;
	
takeWhile = f: foldr (x ns: if f x then [x, ns] else eos) eos;

break = p s:
	go = xs a:
		x, ns = xs;
		if eos? x then [a, eos]
		else if p x then [[x,a], ns]
		else (left,right=go ns eos; [[x,left], right]);
	go s eos;

lines = s:
	left, ns = break (x:x=='\n') s;
	if eos? left then eos
	else [string (list left), lines ns];

catS = s:
	x, xs = s;
	if eos? xs then x
	else if eos? x then catS xs
	else (y, ys = x;
		  if eos? y then catS xs
		  else [y, catS [ys, xs]]);

zip = sx sy:
	x, xs = sx;
	y, ys = sy;
	if eos? x then eos
	else if eos? y then eos
	else [[x,[y]], zip xs ys];

cat = y x:
	catS [x, [y]];

repeat = x:
	[x, repeat x];
	
pipe = w r:
	x, ns = r;
	if eos? x then w eos
	else pipe (w x) ns;

file1 = read "test.txt";
file2 = read "test2.txt";
file3 = write "test3.txt";
fjson = read "json.txt";
zipped = zip (lines file1) (lines file2);

fromJson fjson