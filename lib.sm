id = x: x;

flip = f x y: f y x;

foldr = f z s:
	x, ns = s;
	if eos? x then z
	else f x (foldr f z ns);

map = f: foldr (x ns: [f x, ns]) eos;

filter = f: foldr (x ns: if f x then [x, ns] else ns) eos;

head = n s:
	x, ns = s;
	if eos? x then eos
	else if n < 1 then eos
	else [x, head (n-1) ns];

takeWhile = f: foldr (x ns: if f x then [x, ns] else eos) eos;

break = p s:
	go = xs a:
		x, ns = xs;
		if eos? x then [a, eos]
		else if p x then [[x,a], ns]
		else (left,right=go ns eos; [[x,left], right]);
	go s eos;

lines = s:
	left, ns = break (x:x=='\n') s;
	if eos? left then eos
	else [string (list left), lines ns];

catS = s:
	x, xs = s;
	if eos? xs then x
	else if eos? x then catS xs
	else (y, ys = x;
		  if eos? y then catS xs
		  else [y, catS [ys, xs]]);
#asd
cat = y x:
	catS [x, [y]];

printS = map print;

file1 = read "test.txt";
file2 = read "test2.txt";

printS (file1|cat file2)