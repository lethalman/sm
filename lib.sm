# This file is part of SM (Stream Manipulator).
#
# SM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# SM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with SM.  If not, see <http://www.gnu.org/licenses/>.

id = x: x;

flip = f x y: f y x;

foldr = f z s:
	x, ns = s;
	if eos? x then z
	else f x (foldr f z ns);

map = f: foldr (x ns: [f x, ns]) eos;

sum = foldr (x ns: x+ns) 0;

filter = f: foldr (x ns: if f x then [x, ns] else ns) eos;

head = n s:
	x, ns = s;
	if eos? x then eos
	else if n < 1 then eos
	else [x, head (n-1) ns];

tail = n s:
	go = i xs a:
		x, ns = xs;
		if eos? x then [0, a]
		else (l,t = go (i+1) ns eos;
			  if l < n then [l+1, [x, t]] else [l,t]);
	_, r = go 0 s eos;
	r;
	
takeWhile = f: foldr (x ns: if f x then [x, ns] else eos) eos;

break = p s:
	go = xs a:
		x, ns = xs;
		if eos? x then [a, eos]
		else if p x then [[x,a], ns]
		else (left,right=go ns eos; [[x,left], right]);
	go s eos;

lines = s:
	left, ns = break (x:x=='\n') s;
	if eos? left then eos
	else [string (list left), lines ns];

# Concatenates a stream of streams
catS = s:
	x, xs = s;
	y, ys = x;
	if eos? xs then x
	else if eos? y then catS xs
	else [y, catS [ys, xs]];

# Zip two streams
zip = sy sx:
	x, xs = sx;
	y, ys = sy;
	if eos? x then eos
	else if eos? y then eos
	else [[x,[y]], zip ys xs];

fst = l:
	x, _ = l;
	x;

snd = l:
	_, x = l;
	x;

# Concatenate two streams
cat = y x:
	catS [x, [y]];

# Flattens a tree of streams
deep = s:
	x, xs = s;
	y, ys = x;
	if eos? xs then [y, deep ys]
	else if eos? y then deep xs
	else [y, deep ys|cat (deep xs)];
	
repeat = x:
	[x, repeat x];
	
pipe = w r:
	x, ns = r;
	if eos? x then w eos
	else pipe (w x) ns;

grep = p: filter (match p);

eols = |zip (repeat '\n')|catS;

file1 = read "test.txt";
file2 = read "test2.txt";
file3 = write "test3.txt";
fjson = read "test.json";
fhtml = read "test.html";
fxml = read "test.xml";
nums = stream [1,2,3,4,5];
zipped = zip (lines file1) (lines file2);

lines file1|map ((replace ~e~) 't')